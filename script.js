document.addEventListener("DOMContentLoaded", () => {
  // L·∫•y c√°c ph·∫ßn t·ª≠ HTML c·∫ßn thi·∫øt
  const startScreen = document.getElementById("start-screen");
  const mainContent = document.getElementById("main-content");
  const backgroundMusic = document.getElementById("background-music");
  const messageElement = document.getElementById("current-message");
  const questionBox = document.getElementById("question-box");
  const questionTextElement = document.querySelector(".question");
  const yesBtn = document.getElementById("yes-btn");
  const noBtn = document.getElementById("no-btn");
  const successMessage = document.getElementById("success-message");
  const container = document.querySelector(".container");
  const musicToggleButton = document.getElementById("music-toggle-btn");

  // Danh s√°ch c√°c l·ªùi nh·∫Øn (gi·ªØ nguy√™n)
  const messages = [
    "S∆° Ri ∆°i...",
    "C√≥ l·∫ßn b·ªã s√©t ƒë√°nh nh∆∞ng kh√¥ng ch·∫øch, ƒë√≥ l√† l·∫ßn ƒë·∫ßu anh g·∫∑p em.",
    "R·∫•t l√¢u r·ªìi anh m·ªõi c√≥ c·∫£m gi√°c h·ªìi h·ªôp, ng·∫°i ng√πng khi n√≥i chuy·ªán v·ªõi m·ªôt ng∆∞·ªùi con g√°i...",
    "...c√≥ m·∫•y l·∫ßn anh l·∫•y h·∫øt can ƒë·∫£m ƒë·ªÉ n·∫Øm tay em th√¨ tim anh n√≥ ƒë·∫≠p th√¨nh th·ªãch z·∫≠y n√®.",
    "Anh c√≥ c·∫£m gi√°c mu·ªën che ch·ªü em. Anh c≈©ng kh√¥ng c√≤n tr·∫ª ƒë·ªÉ m√† y√™u tr·∫£i nghi·ªám, anh s·∫Ω ƒë·ªëi x·ª≠ t·ª≠ t·∫ø v·ªõi em, anh c≈©ng s·∫Ω kh√¥ng ƒë·ªÉ em ph·∫£i ch·ªãu t·ªßi th√¢n hay u·∫•t ·ª©c g√¨ khi m√† em quen anh.",
    "Anh ƒë·∫øn h∆°i mu·ªôn, nh∆∞ng s·∫Ω t·ª≠ t·∫ø v√† y√™u th∆∞∆°ng em.",
    "Anh h∆°i v·ª•ng v·ªÅ m·∫•y chuy·ªán nh∆∞ th·∫ø n√†y, nh∆∞ng t·∫•t c·∫£ nh·ªØng g√¨ anh ghi ·ªü ƒë√¢y l√† th·∫≠t l√≤ng.",
    "M·ªói ng√†y ƒë∆∞·ª£c nh√¨n th·∫•y n·ª• c∆∞·ªùi c·ªßa em l√† m·ªôt ng√†y h·∫°nh ph√∫c v·ªõi anh.",
    "L·∫ßn m√† anh vui nh·∫•t l√† b·ªØa m√† anh mua mattcha cho em, em m·∫∑c s∆° mi tr·∫Øng qu·∫ßn t√¢y √≠, xong c√≤n nh·∫£y ch√¢n s√°o, cute qu√° √†aa.",
    // "Em c√≥ bi·∫øt, ƒë√¥i m·∫Øt em ƒë·∫πp ƒë·∫øn n·ªói khi·∫øn anh qu√™n m·∫•t r·∫±ng c√≤n c·∫£ th·∫ø gi·ªõi xung quanh."
  ];

  // N·ªôi dung c√¢u h·ªèi cu·ªëi c√πng (gi·ªØ nguy√™n)
  const question =
    "Anh th·ª±c s·ª± kh√¥ng mu·ªën b·ªè l·ª° em, h√£y l√†m em b√© c·ªßa anh nha, em cho anh m·ªôt c∆° h·ªôi nh√© S∆° Ri ‚ù§Ô∏è";

  // C·∫•u h√¨nh th·ªùi gian (gi·ªØ nguy√™n)
  const messagePauseDuration = 1500;
  const fadeDuration = 500;
  const postFadePause = 200;
  const typingSpeed = 60;

  // Bi·∫øn tr·∫°ng th√°i nh·∫°c (gi·ªØ nguy√™n)
  let isMusicPlaying = false;

  // --- TH√äM H√ÄM T·∫†O HI·ªÜU ·ª®NG TIM BAY ---
  function createHearts() {
    setInterval(() => {
      const heart = document.createElement("div");
      heart.classList.add("heart"); // S·ª≠ d·ª•ng class 'heart' ƒë√£ ƒë·ªãnh nghƒ©a trong CSS
      heart.innerHTML = "‚ù§Ô∏è"; // N·ªôi dung l√† tr√°i tim
      // V·ªã tr√≠ xu·∫•t hi·ªán ng·∫´u nhi√™n ·ªü d∆∞·ªõi c√πng m√†n h√¨nh
      heart.style.left = Math.random() * 100 + "vw";
      heart.style.bottom = "-30px"; // Xu·∫•t ph√°t t·ª´ d∆∞·ªõi c·∫°nh m√†n h√¨nh m·ªôt ch√∫t
      // K√≠ch th∆∞·ªõc ng·∫´u nhi√™n
      heart.style.fontSize = Math.random() * 15 + 10 + "px"; // Random t·ª´ 10px ƒë·∫øn 25px
      // Th·ªùi gian animation ng·∫´u nhi√™n
      const animationDuration = Math.random() * 5 + 4; // Random t·ª´ 4s ƒë·∫øn 9s
      heart.style.animation = `floatUp ${animationDuration}s linear forwards`;

      document.body.appendChild(heart); // Th√™m tim v√†o body

      // X√≥a tr√°i tim kh·ªèi DOM sau khi animation k·∫øt th√∫c + th√™m ch√∫t th·ªùi gian
      setTimeout(() => {
        heart.remove();
      }, animationDuration * 1000 + 500);
    }, 400); // T·∫°o tim m·ªõi m·ªói 400ms (c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh)
  }
  // --- K·∫æT TH√öC H√ÄM T·∫†O TIM ---

  // H√†m c·∫≠p nh·∫≠t icon n√∫t nh·∫°c (gi·ªØ nguy√™n)
  function updateMusicButtonIcon() {
    if (isMusicPlaying) {
      musicToggleButton.textContent = "üéµ";
      musicToggleButton.setAttribute("aria-label", "T·∫Øt nh·∫°c");
    } else {
      musicToggleButton.textContent = "üîá";
      musicToggleButton.setAttribute("aria-label", "B·∫≠t nh·∫°c");
    }
  }

  // H√†m g√µ ch·ªØ, tr·∫£ v·ªÅ Promise (gi·ªØ nguy√™n)
  function typeWriter(element, text) {
    return new Promise((resolve) => {
      let charIndex = 0;
      element.textContent = "";
      element.style.opacity = 1;
      function type() {
        if (charIndex < text.length) {
          element.textContent += text.charAt(charIndex);
          charIndex++;
          setTimeout(type, typingSpeed);
        } else {
          resolve();
        }
      }
      setTimeout(type, 50);
    });
  }

  // H√†m hi·ªÉn th·ªã tu·∫ßn t·ª± c√°c tin nh·∫Øn (gi·ªØ nguy√™n)
  async function displayMessagesSequentially() {
    for (const messageText of messages) {
      messageElement.style.transition = "none";
      messageElement.style.opacity = 0;
      void messageElement.offsetWidth;
      messageElement.style.transition = `opacity ${
        fadeDuration / 1000
      }s ease-in-out`;
      await typeWriter(messageElement, messageText);
      await new Promise((resolve) => setTimeout(resolve, messagePauseDuration));
      messageElement.style.opacity = 0;
      await new Promise((resolve) =>
        setTimeout(resolve, fadeDuration + postFadePause)
      );
    }
    showQuestion();
  }

  // H√†m hi·ªÉn th·ªã khu v·ª±c c√¢u h·ªèi (gi·ªØ nguy√™n)
  function showQuestion() {
    messageElement.parentElement.style.display = "none";
    questionTextElement.textContent = question;
    questionBox.style.display = "block";
    setTimeout(() => {
      questionBox.classList.add("visible");
      positionNoButton();
    }, 100);
  }

  // H√†m ƒë·∫∑t v·ªã tr√≠ ban ƒë·∫ßu cho n√∫t "Kh√¥ng" (gi·ªØ nguy√™n)
  function positionNoButton() {
    const yesBtnRect = yesBtn.getBoundingClientRect();
    const containerRect = container.getBoundingClientRect();
    const yesBtnOffsetTop = yesBtn.offsetTop;
    const yesBtnOffsetLeft = yesBtn.offsetLeft;
    const initialTop = yesBtnOffsetTop;
    const initialLeft = yesBtnOffsetLeft + yesBtn.offsetWidth + 20;
    noBtn.style.position = "absolute";
    noBtn.style.top = `${Math.max(
      15,
      Math.min(initialTop, container.offsetHeight - noBtn.offsetHeight - 15)
    )}px`;
    noBtn.style.left = `${Math.max(
      15,
      Math.min(initialLeft, container.offsetWidth - noBtn.offsetWidth - 15)
    )}px`;
  }

  // H√†m di chuy·ªÉn n√∫t "Kh√¥ng" (gi·ªØ nguy√™n)
  function moveNoButton() {
    const containerRect = container.getBoundingClientRect();
    const noBtnRect = noBtn.getBoundingClientRect();
    const maxX = container.offsetWidth - noBtn.offsetWidth - 20;
    const maxY = container.offsetHeight - noBtn.offsetHeight - 20;
    const minX = 10;
    const minY = 10;
    let newX = Math.random() * (maxX - minX) + minX;
    let newY = Math.random() * (maxY - minY) + minY;
    const yesBtnOffsetTop = yesBtn.offsetTop;
    const yesBtnOffsetLeft = yesBtn.offsetLeft;
    const yesBtnOffsetBottom = yesBtnOffsetTop + yesBtn.offsetHeight;
    const yesBtnOffsetRight = yesBtnOffsetLeft + yesBtn.offsetWidth;
    const buffer = 15;
    const forbiddenZone = {
      top: yesBtnOffsetTop - buffer,
      left: yesBtnOffsetLeft - buffer,
      bottom: yesBtnOffsetBottom + buffer,
      right: yesBtnOffsetRight + buffer,
    };
    let attempts = 0;
    while (
      newX + noBtn.offsetWidth > forbiddenZone.left &&
      newX < forbiddenZone.right &&
      newY + noBtn.offsetHeight > forbiddenZone.top &&
      newY < forbiddenZone.bottom &&
      attempts < 100
    ) {
      newX = Math.random() * (maxX - minX) + minX;
      newY = Math.random() * (maxY - minY) + minY;
      attempts++;
    }
    noBtn.style.left = `${newX}px`;
    noBtn.style.top = `${newY}px`;
  }

  // --- Event Listeners ---

  // 1. B·∫Øt ƒë·∫ßu khi nh·∫•n v√†o m√†n h√¨nh ch·ªù
  startScreen.addEventListener(
    "click",
    () => {
      startScreen.style.display = "none";
      mainContent.style.display = "block";
      // Ph√°t nh·∫°c v√† c·∫≠p nh·∫≠t n√∫t
      backgroundMusic
        .play()
        .then(() => {
          console.log("Music started playing.");
          isMusicPlaying = true;
          updateMusicButtonIcon();
        })
        .catch((error) => {
          console.warn("Autoplay was prevented:", error);
          isMusicPlaying = false;
          updateMusicButtonIcon();
        });

      // --- G·ªåI H√ÄM T·∫†O TIM ---
      createHearts();
      // --- K·∫æT TH√öC G·ªåI H√ÄM T·∫†O TIM ---

      displayMessagesSequentially(); // B·∫Øt ƒë·∫ßu hi·ªÉn th·ªã tin nh·∫Øn
    },
    { once: true }
  ); // Ch·ªâ ch·∫°y 1 l·∫ßn

  // 2. Khi r√™ chu·ªôt/click v√†o n√∫t "Kh√¥ng" (gi·ªØ nguy√™n)
  noBtn.addEventListener("mouseover", moveNoButton);
  noBtn.addEventListener("click", moveNoButton);

  // X·ª≠ l√Ω cho m√†n h√¨nh c·∫£m ·ª©ng (touch)
  noBtn.addEventListener(
    "touchstart",
    (e) => {
      e.preventDefault(); // NgƒÉn s·ª± ki·ªán click/scroll m·∫∑c ƒë·ªãnh
      moveNoButton(); // G·ªçi h√†m di chuy·ªÉn khi ch·∫°m v√†o
    },
    { passive: false }
  );

  // 3. Khi click v√†o n√∫t "C√≥" (gi·ªØ nguy√™n)
  yesBtn.addEventListener("click", () => {
    questionBox.style.display = "none";
    successMessage.style.display = "block";
    // C√≥ th·ªÉ tƒÉng c∆∞·ªùng hi·ªáu ·ª©ng tim khi nh·∫•n Yes
    // V√≠ d·ª•: t·∫°o th√™m nhi·ªÅu tim h∆°n ngay l·∫≠p t·ª©c
    for (let i = 0; i < 30; i++) {
      setTimeout(createSingleHeart, i * 50); // T·∫°o tim li√™n t·ª•c trong 1.5s
    }
  });

  // H√†m t·∫°o 1 tr√°i tim (d√πng cho hi·ªáu ·ª©ng khi nh·∫•n Yes)
  function createSingleHeart() {
    const heart = document.createElement("div");
    heart.classList.add("heart");
    heart.innerHTML = "‚ù§Ô∏è";
    heart.style.left = Math.random() * 100 + "vw";
    heart.style.bottom = "-30px";
    heart.style.fontSize = Math.random() * 15 + 10 + "px";
    const animationDuration = Math.random() * 4 + 3; // Bay nhanh h∆°n ch√∫t
    heart.style.animation = `floatUp ${animationDuration}s linear forwards`;
    document.body.appendChild(heart);
    setTimeout(() => {
      heart.remove();
    }, animationDuration * 1000 + 500);
  }

  // 4. Khi click v√†o n√∫t b·∫≠t/t·∫Øt nh·∫°c (gi·ªØ nguy√™n)
  musicToggleButton.addEventListener("click", () => {
    if (isMusicPlaying) {
      backgroundMusic.pause();
      isMusicPlaying = false;
    } else {
      backgroundMusic
        .play()
        .then(() => {
          isMusicPlaying = true;
          updateMusicButtonIcon();
        })
        .catch((error) => {
          console.error("Error playing music manually:", error);
          isMusicPlaying = false;
        });
    }
    updateMusicButtonIcon();
  });
}); // H·∫øt DOMContentLoaded
