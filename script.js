document.addEventListener("DOMContentLoaded", () => {
  // L·∫•y c√°c ph·∫ßn t·ª≠ HTML c·∫ßn thi·∫øt
  const startScreen = document.getElementById("start-screen");
  const mainContent = document.getElementById("main-content");
  const backgroundMusic = document.getElementById("background-music");
  const messageElement = document.getElementById("current-message");
  const questionBox = document.getElementById("question-box");
  const questionTextElement = document.querySelector(".question");
  const yesBtn = document.getElementById("yes-btn");
  const noBtn = document.getElementById("no-btn");
  const successMessage = document.getElementById("success-message");
  const container = document.querySelector(".container");
  const musicToggleButton = document.getElementById("music-toggle-btn"); // N√∫t nh·∫°c

  // Danh s√°ch c√°c l·ªùi nh·∫Øn
  const messages = [
    "S∆° Ri ∆°i...",
    "C√≥ l·∫ßn b·ªã s√©t ƒë√°nh nh∆∞ng kh√¥ng ch·∫øt, ƒë√≥ l√† l·∫ßn ƒë·∫ßu anh g·∫∑p em.",
    "R·∫•t l√¢u r·ªìi anh m·ªõi c√≥ c·∫£m gi√°c h·ªìi h·ªôp, ng·∫°i ng√πng khi n√≥i chuy·ªán v·ªõi m·ªôt ng∆∞·ªùi con g√°i...",
    "...c√≥ m·∫•y l·∫ßn anh l·∫•y h·∫øt can ƒë·∫£m ƒë·ªÉ n·∫Øm tay em th√¨ tim anh n√≥ ƒë·∫≠p th√¨nh th·ªãch z·∫≠y n√®.",
    "Anh c√≥ c·∫£m gi√°c mu·ªën che ch·ªü em. Anh c≈©ng kh√¥ng c√≤n tr·∫ª ƒë·ªÉ m√† y√™u tr·∫£i nghi·ªám, anh s·∫Ω ƒë·ªëi x·ª≠ t·ª≠ t·∫ø v·ªõi em, anh c≈©ng s·∫Ω kh√¥ng ƒë·ªÉ em ph·∫£i ch·ªãu t·ªßi th√¢n hay u·∫•t ·ª©c g√¨ khi m√† em quen anh.",
    "Anh ƒë·∫øn h∆°i mu·ªôn, nh∆∞ng s·∫Ω t·ª≠ t·∫ø v√† y√™u th∆∞∆°ng em.",
    "Anh h∆°i v·ª•ng v·ªÅ m·∫•y chuy·ªán nh∆∞ th·∫ø n√†y, nh∆∞ng t·∫•t c·∫£ nh·ªØng g√¨ anh ghi ·ªü ƒë√¢y l√† th·∫≠t l√≤ng.",
  ];

  // N·ªôi dung c√¢u h·ªèi cu·ªëi c√πng
  const question =
    "Anh th·ª±c s·ª± kh√¥ng mu·ªën b·ªè l·ª° em, h√£y l√†m em b√© c·ªßa anh, em cho anh m·ªôt c∆° h·ªôi nh√© S∆° Ri ‚ù§Ô∏è";

  // C·∫•u h√¨nh th·ªùi gian (miligi√¢y)
  const messagePauseDuration = 1500; // D·ª´ng sau khi g√µ xong
  const fadeDuration = 500; // Th·ªùi gian m·ªù d·∫ßn
  const postFadePause = 200; // D·ª´ng sau khi m·ªù d·∫ßn
  const typingSpeed = 60; // T·ªëc ƒë·ªô g√µ

  // Bi·∫øn tr·∫°ng th√°i nh·∫°c
  let isMusicPlaying = false;

  // H√†m c·∫≠p nh·∫≠t icon n√∫t nh·∫°c
  function updateMusicButtonIcon() {
    if (isMusicPlaying) {
      musicToggleButton.textContent = "üéµ";
      musicToggleButton.setAttribute("aria-label", "T·∫Øt nh·∫°c");
    } else {
      musicToggleButton.textContent = "üîá";
      musicToggleButton.setAttribute("aria-label", "B·∫≠t nh·∫°c");
    }
  }

  // H√†m g√µ ch·ªØ, tr·∫£ v·ªÅ Promise
  function typeWriter(element, text) {
    return new Promise((resolve) => {
      let charIndex = 0;
      element.textContent = "";
      element.style.opacity = 1;
      function type() {
        if (charIndex < text.length) {
          element.textContent += text.charAt(charIndex);
          charIndex++;
          setTimeout(type, typingSpeed);
        } else {
          resolve();
        }
      }
      setTimeout(type, 50);
    });
  }

  // H√†m hi·ªÉn th·ªã tu·∫ßn t·ª± c√°c tin nh·∫Øn
  async function displayMessagesSequentially() {
    for (const messageText of messages) {
      messageElement.style.transition = "none";
      messageElement.style.opacity = 0;
      void messageElement.offsetWidth;
      messageElement.style.transition = `opacity ${
        fadeDuration / 1000
      }s ease-in-out`;
      await typeWriter(messageElement, messageText);
      await new Promise((resolve) => setTimeout(resolve, messagePauseDuration));
      messageElement.style.opacity = 0;
      await new Promise((resolve) =>
        setTimeout(resolve, fadeDuration + postFadePause)
      );
    }
    showQuestion();
  }

  // H√†m hi·ªÉn th·ªã khu v·ª±c c√¢u h·ªèi
  function showQuestion() {
    messageElement.parentElement.style.display = "none";
    questionTextElement.textContent = question;
    questionBox.style.display = "block";
    setTimeout(() => {
      questionBox.classList.add("visible");
      positionNoButton();
    }, 100);
  }

  // H√†m ƒë·∫∑t v·ªã tr√≠ ban ƒë·∫ßu cho n√∫t "Kh√¥ng"
  function positionNoButton() {
    const yesBtnRect = yesBtn.getBoundingClientRect();
    const containerRect = container.getBoundingClientRect(); // D√πng container ƒë·ªÉ t√≠nh to√°n
    // T√≠nh v·ªã tr√≠ t∆∞∆°ng ƒë·ªëi c·ªßa n√∫t Yes b√™n trong container
    const yesBtnOffsetTop = yesBtn.offsetTop;
    const yesBtnOffsetLeft = yesBtn.offsetLeft;

    // ƒê·∫∑t n√∫t No g·∫ßn b√™n ph·∫£i n√∫t Yes ban ƒë·∫ßu
    const initialTop = yesBtnOffsetTop;
    const initialLeft = yesBtnOffsetLeft + yesBtn.offsetWidth + 20;

    noBtn.style.position = "absolute";
    // Gi·ªõi h·∫°n v·ªã tr√≠ trong container
    noBtn.style.top = `${Math.max(
      15,
      Math.min(initialTop, container.offsetHeight - noBtn.offsetHeight - 15)
    )}px`;
    noBtn.style.left = `${Math.max(
      15,
      Math.min(initialLeft, container.offsetWidth - noBtn.offsetWidth - 15)
    )}px`;
  }

  // H√†m di chuy·ªÉn n√∫t "Kh√¥ng"
  function moveNoButton() {
    const containerRect = container.getBoundingClientRect();
    const noBtnRect = noBtn.getBoundingClientRect();
    // Gi·ªõi h·∫°n di chuy·ªÉn l√† k√≠ch th∆∞·ªõc c·ªßa container (offsetWidth/Height) tr·ª´ ƒëi k√≠ch th∆∞·ªõc n√∫t v√† padding
    const maxX = container.offsetWidth - noBtn.offsetWidth - 20;
    const maxY = container.offsetHeight - noBtn.offsetHeight - 20;
    const minX = 10;
    const minY = 10;

    let newX = Math.random() * (maxX - minX) + minX;
    let newY = Math.random() * (maxY - minY) + minY;

    // Ch·ªëng n√∫t No ƒë√® l√™n n√∫t Yes (s·ª≠ d·ª•ng offsetTop/Left)
    const yesBtnOffsetTop = yesBtn.offsetTop;
    const yesBtnOffsetLeft = yesBtn.offsetLeft;
    const yesBtnOffsetBottom = yesBtnOffsetTop + yesBtn.offsetHeight;
    const yesBtnOffsetRight = yesBtnOffsetLeft + yesBtn.offsetWidth;
    const buffer = 15;
    const forbiddenZone = {
      top: yesBtnOffsetTop - buffer,
      left: yesBtnOffsetLeft - buffer,
      bottom: yesBtnOffsetBottom + buffer,
      right: yesBtnOffsetRight + buffer,
    };

    let attempts = 0;
    while (
      newX + noBtn.offsetWidth > forbiddenZone.left &&
      newX < forbiddenZone.right &&
      newY + noBtn.offsetHeight > forbiddenZone.top &&
      newY < forbiddenZone.bottom &&
      attempts < 100
    ) {
      newX = Math.random() * (maxX - minX) + minX;
      newY = Math.random() * (maxY - minY) + minY;
      attempts++;
    }

    noBtn.style.left = `${newX}px`;
    noBtn.style.top = `${newY}px`;
  }

  // --- Event Listeners ---

  // 1. B·∫Øt ƒë·∫ßu khi nh·∫•n v√†o m√†n h√¨nh ch·ªù
  startScreen.addEventListener(
    "click",
    () => {
      startScreen.style.display = "none";
      mainContent.style.display = "block";
      // Ph√°t nh·∫°c v√† c·∫≠p nh·∫≠t n√∫t
      backgroundMusic
        .play()
        .then(() => {
          console.log("Music started playing.");
          isMusicPlaying = true;
          updateMusicButtonIcon();
        })
        .catch((error) => {
          console.warn("Autoplay was prevented:", error);
          isMusicPlaying = false;
          updateMusicButtonIcon();
        });
      displayMessagesSequentially();
    },
    { once: true }
  );

  // 2. Khi r√™ chu·ªôt/click v√†o n√∫t "Kh√¥ng"
  noBtn.addEventListener("mouseover", moveNoButton);
  noBtn.addEventListener("click", moveNoButton);

  // 3. Khi click v√†o n√∫t "C√≥"
  yesBtn.addEventListener("click", () => {
    questionBox.style.display = "none";
    successMessage.style.display = "block";
  });

  // 4. Khi click v√†o n√∫t b·∫≠t/t·∫Øt nh·∫°c
  musicToggleButton.addEventListener("click", () => {
    if (isMusicPlaying) {
      backgroundMusic.pause();
      isMusicPlaying = false;
    } else {
      backgroundMusic
        .play()
        .then(() => {
          isMusicPlaying = true;
          updateMusicButtonIcon();
        })
        .catch((error) => {
          console.error("Error playing music manually:", error);
          isMusicPlaying = false; // Gi·ªØ tr·∫°ng th√°i t·∫Øt n·∫øu l·ªói
        });
    }
    updateMusicButtonIcon(); // C·∫≠p nh·∫≠t icon ngay
  });
}); // H·∫øt DOMContentLoaded
